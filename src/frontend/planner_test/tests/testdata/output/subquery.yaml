# This file is automatically generated. See `src/frontend/planner_test/README.md` for more information.
- sql: |
    create table t (v1 bigint, v2 double precision);
    select v1 from (select * from t) where v2 > 1;
  logical_plan: |-
    LogicalProject { exprs: [t.v1] }
    └─LogicalFilter { predicate: (t.v2 > 1:Int32::Float64) }
      └─LogicalProject { exprs: [t.v1, t.v2] }
        └─LogicalScan { table: t, columns: [t.v1, t.v2, t._row_id] }
- name: merge and then eliminate
  sql: |
    create table t (v1 bigint, v2 double precision);
    select a1 as v1, a2 as v2 from (select v1 as a1, v2 as a2 from t);
  logical_plan: |-
    LogicalProject { exprs: [t.v1, t.v2] }
    └─LogicalProject { exprs: [t.v1, t.v2] }
      └─LogicalScan { table: t, columns: [t.v1, t.v2, t._row_id] }
  optimized_logical_plan_for_batch: 'LogicalScan { table: t, columns: [t.v1, t.v2] }'
- sql: |
    create table t (v1 bigint, v2 double precision);
    select v1 from (select v2, v1 as v3 from t) where v2 > 1;
  binder_error: |-
    Bind error: failed to bind expression: v1

    Caused by:
      Item not found: Invalid column: v1
- sql: |
    create table t (v1 bigint, v2 double precision);
    select v3 from (select v2, v1 as v3 from t) where v2 > 1;
  logical_plan: |-
    LogicalProject { exprs: [t.v1] }
    └─LogicalFilter { predicate: (t.v2 > 1:Int32::Float64) }
      └─LogicalProject { exprs: [t.v2, t.v1] }
        └─LogicalScan { table: t, columns: [t.v1, t.v2, t._row_id] }
- name: consecutive projects are merged
  sql: |
    create table t (v1 bigint, v2 double precision);
    select v1, 2 from (select v1, v2, 1 from t);
  logical_plan: |-
    LogicalProject { exprs: [t.v1, 2:Int32] }
    └─LogicalProject { exprs: [t.v1, t.v2, 1:Int32] }
      └─LogicalScan { table: t, columns: [t.v1, t.v2, t._row_id] }
  optimized_logical_plan_for_batch: |-
    LogicalProject { exprs: [t.v1, 2:Int32] }
    └─LogicalScan { table: t, columns: [t.v1] }
- sql: |
    create table t (v1 bigint, v2 double precision);
    select * from (select * from t);
  logical_plan: |-
    LogicalProject { exprs: [t.v1, t.v2] }
    └─LogicalProject { exprs: [t.v1, t.v2] }
      └─LogicalScan { table: t, columns: [t.v1, t.v2, t._row_id] }
  optimized_logical_plan_for_batch: 'LogicalScan { table: t, columns: [t.v1, t.v2] }'
- name: joins
  sql: |
    create table t (v1 bigint, v2 double precision);
    select * from (select * from t), t;
  logical_plan: |-
    LogicalProject { exprs: [t.v1, t.v2, t.v1, t.v2] }
    └─LogicalJoin { type: Inner, on: true, output: all }
      ├─LogicalProject { exprs: [t.v1, t.v2] }
      │ └─LogicalScan { table: t, columns: [t.v1, t.v2, t._row_id] }
      └─LogicalScan { table: t, columns: [t.v1, t.v2, t._row_id] }
- name: table alias
  sql: |
    create table t (v1 bigint, v2 double precision);
    select * from (select * from t) as tt join t on tt.v1=t.v1;
  logical_plan: |-
    LogicalProject { exprs: [t.v1, t.v2, t.v1, t.v2] }
    └─LogicalJoin { type: Inner, on: (t.v1 = t.v1), output: all }
      ├─LogicalProject { exprs: [t.v1, t.v2] }
      │ └─LogicalScan { table: t, columns: [t.v1, t.v2, t._row_id] }
      └─LogicalScan { table: t, columns: [t.v1, t.v2, t._row_id] }
- name: alias less columns than available
  sql: |
    create table t (v1 bigint, v2 double precision);
    select * from (select * from t) as tt(a) join t on a=v1;
  logical_plan: |-
    LogicalProject { exprs: [t.v1, t.v2, t.v1, t.v2] }
    └─LogicalJoin { type: Inner, on: (t.v1 = t.v1), output: all }
      ├─LogicalProject { exprs: [t.v1, t.v2] }
      │ └─LogicalScan { table: t, columns: [t.v1, t.v2, t._row_id] }
      └─LogicalScan { table: t, columns: [t.v1, t.v2, t._row_id] }
- name: alias more columns than available
  sql: |
    create table t (v1 bigint, v2 double precision);
    select * from (select * from t) as tt(a, b, c) join t on a=v1;
  binder_error: 'Bind error: table "tt" has 2 columns available but 3 column aliases specified'
- sql: |
    create table t(x int);
    select * from t, (select * from t as t2 order by t.x desc) as t3;
  binder_error: |-
    Bind error: failed to bind expression: t.x

    Caused by:
      Item not found: Invalid column: x
- sql: |
    create table t(x int);
    select * from t, (select t.x) as t1;
  binder_error: |-
    Bind error: failed to bind expression: t.x

    Caused by:
      Item not found: Invalid column: x
- sql: |
    create table t(x int);
    select * from t CROSS JOIN (select t.x) as t1;
  binder_error: |-
    Bind error: failed to bind expression: t.x

    Caused by:
      Item not found: Invalid column: x
- sql: |
    create table ab (a int, b int);
    create table bc (b int, c int);
    create table t (v1 int, v2 varchar);
    select * from ab where exists (
      select * from bc, (
          select * from t where v1 = a
      ) as t0
    );
  optimized_logical_plan_for_batch: |-
    LogicalJoin { type: LeftSemi, on: IsNotDistinctFrom(ab.a, t.v1), output: all }
    ├─LogicalScan { table: ab, columns: [ab.a, ab.b] }
    └─LogicalJoin { type: Inner, on: true, output: all }
      ├─LogicalScan { table: bc, columns: [] }
      └─LogicalScan { table: t, columns: [t.v1], predicate: IsNotNull(t.v1) }
- name: We cannot reference columns in left table if not lateral
  sql: |
    create table ab (a int, b int);
    create table bc (b int, c int);
    create table t (v1 int, v2 varchar);
    select * from ab where exists (
      select * from bc, (
          select * from t where v1 = c
      ) as t0
    );
  binder_error: |-
    Bind error: failed to bind expression: EXISTS (SELECT * FROM bc, (SELECT * FROM t WHERE v1 = c) AS t0)

    Caused by:
      Bind error: failed to bind expression: v1 = c

    Caused by:
      Item not found: Invalid column: c
- name: We need to ensure doubly nested reference to a left table is not permitted
  sql: |
    create table ab (a int, b int);
    create table bc (b int, c int);
    create table t (v1 int, v2 int);
    select * from ab, (
      select * from bc, (
          select * from t where v1 = a
      ) as t0
    );
  binder_error: |-
    Bind error: failed to bind expression: v1 = a

    Caused by:
      Item not found: Invalid column: a
- sql: |
    create table t1 (x int, y int);
    create table t2 (x int, y int);
    select count(1) from (select sum(distinct 1) from t1), t2;
  logical_plan: |-
    LogicalProject { exprs: [count(1:Int32)] }
    └─LogicalAgg { aggs: [count(1:Int32)] }
      └─LogicalProject { exprs: [1:Int32] }
        └─LogicalJoin { type: Inner, on: true, output: all }
          ├─LogicalProject { exprs: [sum(distinct 1:Int32)] }
          │ └─LogicalAgg { aggs: [sum(distinct 1:Int32)] }
          │   └─LogicalProject { exprs: [1:Int32] }
          │     └─LogicalScan { table: t1, columns: [t1.x, t1.y, t1._row_id] }
          └─LogicalScan { table: t2, columns: [t2.x, t2.y, t2._row_id] }
  optimized_logical_plan_for_batch: |-
    LogicalAgg { aggs: [count(1:Int32)] }
    └─LogicalProject { exprs: [1:Int32] }
      └─LogicalJoin { type: Inner, on: true, output: all }
        ├─LogicalAgg { aggs: [] }
        │ └─LogicalAgg { group_key: [1:Int32], aggs: [] }
        │   └─LogicalProject { exprs: [1:Int32] }
        │     └─LogicalScan { table: t1, columns: [] }
        └─LogicalScan { table: t2, columns: [] }
  batch_plan: |-
    BatchSimpleAgg { aggs: [count(1:Int32)] }
    └─BatchProject { exprs: [1:Int32] }
      └─BatchNestedLoopJoin { type: Inner, predicate: true, output: all }
        ├─BatchSimpleAgg { aggs: [] }
        │ └─BatchExchange { order: [], dist: Single }
        │   └─BatchHashAgg { group_key: [1:Int32], aggs: [] }
        │     └─BatchExchange { order: [], dist: HashShard(1:Int32) }
        │       └─BatchProject { exprs: [1:Int32] }
        │         └─BatchScan { table: t1, columns: [], distribution: SomeShard }
        └─BatchExchange { order: [], dist: Single }
          └─BatchScan { table: t2, columns: [], distribution: SomeShard }
- sql: |
    SELECT (SELECT pg_catalog.pg_get_userbyid(1))
  logical_plan: |-
    LogicalProject { exprs: [rw_users.name] }
    └─LogicalApply { type: LeftOuter, on: true, correlated_id: 1, max_one_row: true }
      ├─LogicalValues { rows: [[]], schema: Schema { fields: [] } }
      └─LogicalProject { exprs: [rw_users.name] }
        └─LogicalApply { type: LeftOuter, on: true, correlated_id: 2, max_one_row: true }
          ├─LogicalValues { rows: [[]], schema: Schema { fields: [] } }
          └─LogicalProject { exprs: [rw_users.name] }
            └─LogicalFilter { predicate: (1:Int32 = rw_users.id) }
              └─LogicalShare { id: 2 }
                └─LogicalProject { exprs: [rw_users.id, rw_users.name, rw_users.create_db, rw_users.is_super, '********':Varchar] }
                  └─LogicalScan { table: rw_users, columns: [rw_users.id, rw_users.name, rw_users.is_super, rw_users.create_db, rw_users.create_user, rw_users.can_login] }
  optimized_logical_plan_for_batch: |-
    LogicalJoin { type: LeftOuter, on: true, output: all }
    ├─LogicalValues { rows: [[]], schema: Schema { fields: [] } }
    └─LogicalJoin { type: LeftOuter, on: true, output: all }
      ├─LogicalValues { rows: [[]], schema: Schema { fields: [] } }
      └─LogicalScan { table: rw_users, output_columns: [rw_users.name], required_columns: [rw_users.name, rw_users.id], predicate: (1:Int32 = rw_users.id) }
  batch_plan: |-
    BatchNestedLoopJoin { type: LeftOuter, predicate: true, output: all }
    ├─BatchValues { rows: [[]] }
    └─BatchNestedLoopJoin { type: LeftOuter, predicate: true, output: all }
      ├─BatchValues { rows: [[]] }
      └─BatchProject { exprs: [rw_users.name] }
        └─BatchFilter { predicate: (1:Int32 = rw_users.id) }
          └─BatchScan { table: rw_users, columns: [rw_users.name, rw_users.id], distribution: Single }
- sql: |
    SELECT n.nspname as "Schema",
    c.relname as "Name",
    CASE c.relkind WHEN 'r' THEN 'table' WHEN 'v' THEN 'view' WHEN 'm' THEN 'materialized view' WHEN 'i' THEN 'index' WHEN 'S' THEN 'sequence' WHEN 's' THEN 'special' WHEN 't' THEN 'TOAST table' WHEN 'f' THEN 'foreign table' WHEN 'p' THEN 'partitioned table' WHEN 'I' THEN 'partitioned index' END as "Type",
    pg_catalog.pg_get_userbyid(c.relowner) as "Owner"
    FROM pg_catalog.pg_class c
    LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
    WHERE c.relkind IN ('r','p','v','m','S','f','')
    AND n.nspname <> 'pg_catalog'
    AND n.nspname !~ '^pg_toast'
    AND n.nspname <> 'information_schema'
    AND pg_catalog.pg_table_is_visible(c.oid)
    ORDER BY 1,2;
  logical_plan: |-
    LogicalProject { exprs: [rw_schemas.name, rw_tables.name, Case(($expr1 = 'r':Varchar), 'table':Varchar, ($expr1 = 'v':Varchar), 'view':Varchar, ($expr1 = 'm':Varchar), 'materialized view':Varchar, ($expr1 = 'i':Varchar), 'index':Varchar, ($expr1 = 'S':Varchar), 'sequence':Varchar, ($expr1 = 's':Varchar), 'special':Varchar, ($expr1 = 't':Varchar), 'TOAST table':Varchar, ($expr1 = 'f':Varchar), 'foreign table':Varchar, ($expr1 = 'p':Varchar), 'partitioned table':Varchar, ($expr1 = 'I':Varchar), 'partitioned index':Varchar) as $expr3, rw_users.name] }
    └─LogicalApply { type: LeftOuter, on: true, correlated_id: 1, max_one_row: true }
      ├─LogicalFilter { predicate: In($expr1, 'r':Varchar, 'p':Varchar, 'v':Varchar, 'm':Varchar, 'S':Varchar, 'f':Varchar, '':Varchar) AND (rw_schemas.name <> 'pg_catalog':Varchar) AND IsNull(RegexpMatch(rw_schemas.name, '^pg_toast':Varchar)) AND (rw_schemas.name <> 'information_schema':Varchar) }
      │ └─LogicalJoin { type: LeftOuter, on: (rw_schemas.id = rw_tables.schema_id), output: all }
      │   ├─LogicalShare { id: 16 }
      │   │ └─LogicalProject { exprs: [rw_tables.id, rw_tables.name, rw_tables.schema_id, rw_tables.owner, Case(('table':Varchar = 'table':Varchar), 'r':Varchar, ('table':Varchar = 'system table':Varchar), 'r':Varchar, ('table':Varchar = 'index':Varchar), 'i':Varchar, ('table':Varchar = 'view':Varchar), 'v':Varchar, ('table':Varchar = 'materialized view':Varchar), 'm':Varchar) as $expr1, 0:Int32, 0:Int32, Array as $expr2] }
      │   │   └─LogicalShare { id: 14 }
      │   │     └─LogicalUnion { all: true }
      │   │       ├─LogicalUnion { all: true }
      │   │       │ ├─LogicalUnion { all: true }
      │   │       │ │ ├─LogicalUnion { all: true }
      │   │       │ │ │ ├─LogicalUnion { all: true }
      │   │       │ │ │ │ ├─LogicalUnion { all: true }
      │   │       │ │ │ │ │ ├─LogicalProject { exprs: [rw_tables.id, rw_tables.name, 'table':Varchar, rw_tables.schema_id, rw_tables.owner, rw_tables.definition, rw_tables.acl] }
      │   │       │ │ │ │ │ │ └─LogicalScan { table: rw_tables, columns: [rw_tables.id, rw_tables.name, rw_tables.schema_id, rw_tables.owner, rw_tables.definition, rw_tables.acl, rw_tables.initialized_at, rw_tables.created_at] }
      │   │       │ │ │ │ │ └─LogicalProject { exprs: [rw_system_tables.id, rw_system_tables.name, 'system table':Varchar, rw_system_tables.schema_id, rw_system_tables.owner, rw_system_tables.definition, rw_system_tables.acl] }
      │   │       │ │ │ │ │   └─LogicalScan { table: rw_system_tables, columns: [rw_system_tables.id, rw_system_tables.name, rw_system_tables.schema_id, rw_system_tables.owner, rw_system_tables.definition, rw_system_tables.acl] }
      │   │       │ │ │ │ └─LogicalProject { exprs: [rw_sources.id, rw_sources.name, 'source':Varchar, rw_sources.schema_id, rw_sources.owner, rw_sources.definition, rw_sources.acl] }
      │   │       │ │ │ │   └─LogicalScan { table: rw_sources, columns: [rw_sources.id, rw_sources.name, rw_sources.schema_id, rw_sources.owner, rw_sources.connector, rw_sources.columns, rw_sources.format, rw_sources.row_encode, rw_sources.append_only, rw_sources.connection_id, rw_sources.definition, rw_sources.acl, rw_sources.initialized_at, rw_sources.created_at] }
      │   │       │ │ │ └─LogicalProject { exprs: [rw_indexes.id, rw_indexes.name, 'index':Varchar, rw_indexes.schema_id, rw_indexes.owner, rw_indexes.definition, rw_indexes.acl] }
      │   │       │ │ │   └─LogicalScan { table: rw_indexes, columns: [rw_indexes.id, rw_indexes.name, rw_indexes.primary_table_id, rw_indexes.original_column_ids, rw_indexes.schema_id, rw_indexes.owner, rw_indexes.definition, rw_indexes.acl, rw_indexes.initialized_at, rw_indexes.created_at] }
      │   │       │ │ └─LogicalProject { exprs: [rw_sinks.id, rw_sinks.name, 'sink':Varchar, rw_sinks.schema_id, rw_sinks.owner, rw_sinks.definition, rw_sinks.acl] }
      │   │       │ │   └─LogicalScan { table: rw_sinks, columns: [rw_sinks.id, rw_sinks.name, rw_sinks.schema_id, rw_sinks.owner, rw_sinks.connector, rw_sinks.sink_type, rw_sinks.connection_id, rw_sinks.definition, rw_sinks.acl, rw_sinks.initialized_at, rw_sinks.created_at] }
      │   │       │ └─LogicalProject { exprs: [rw_materialized_views.id, rw_materialized_views.name, 'materialized view':Varchar, rw_materialized_views.schema_id, rw_materialized_views.owner, rw_materialized_views.definition, rw_materialized_views.acl] }
      │   │       │   └─LogicalScan { table: rw_materialized_views, columns: [rw_materialized_views.id, rw_materialized_views.name, rw_materialized_views.schema_id, rw_materialized_views.owner, rw_materialized_views.definition, rw_materialized_views.acl, rw_materialized_views.initialized_at, rw_materialized_views.created_at] }
      │   │       └─LogicalProject { exprs: [rw_views.id, rw_views.name, 'view':Varchar, rw_views.schema_id, rw_views.owner, rw_views.definition, rw_views.acl] }
      │   │         └─LogicalScan { table: rw_views, columns: [rw_views.id, rw_views.name, rw_views.schema_id, rw_views.owner, rw_views.definition, rw_views.acl] }
      │   └─LogicalShare { id: 18 }
      │     └─LogicalProject { exprs: [rw_schemas.id, rw_schemas.name, rw_schemas.owner, rw_schemas.acl] }
      │       └─LogicalScan { table: rw_schemas, columns: [rw_schemas.id, rw_schemas.name, rw_schemas.owner, rw_schemas.acl] }
      └─LogicalProject { exprs: [rw_users.name] }
        └─LogicalFilter { predicate: (CorrelatedInputRef { index: 3, correlated_id: 1 } = rw_users.id) }
          └─LogicalShare { id: 22 }
            └─LogicalProject { exprs: [rw_users.id, rw_users.name, rw_users.create_db, rw_users.is_super, '********':Varchar] }
              └─LogicalScan { table: rw_users, columns: [rw_users.id, rw_users.name, rw_users.is_super, rw_users.create_db, rw_users.create_user, rw_users.can_login] }
  batch_plan: |-
    BatchExchange { order: [rw_schemas.name ASC, rw_tables.name ASC], dist: Single }
    └─BatchProject { exprs: [rw_schemas.name, rw_tables.name, Case(($expr1 = 'r':Varchar), 'table':Varchar, ($expr1 = 'v':Varchar), 'view':Varchar, ($expr1 = 'm':Varchar), 'materialized view':Varchar, ($expr1 = 'i':Varchar), 'index':Varchar, ($expr1 = 'S':Varchar), 'sequence':Varchar, ($expr1 = 's':Varchar), 'special':Varchar, ($expr1 = 't':Varchar), 'TOAST table':Varchar, ($expr1 = 'f':Varchar), 'foreign table':Varchar, ($expr1 = 'p':Varchar), 'partitioned table':Varchar, ($expr1 = 'I':Varchar), 'partitioned index':Varchar) as $expr2, rw_users.name] }
      └─BatchProject { exprs: [rw_tables.name, Case(('table':Varchar = 'table':Varchar), 'r':Varchar, ('table':Varchar = 'system table':Varchar), 'r':Varchar, ('table':Varchar = 'index':Varchar), 'i':Varchar, ('table':Varchar = 'view':Varchar), 'v':Varchar, ('table':Varchar = 'materialized view':Varchar), 'm':Varchar) as $expr1, rw_schemas.name, rw_users.name] }
        └─BatchSort { order: [rw_schemas.name ASC, rw_tables.name ASC] }
          └─BatchHashJoin { type: LeftOuter, predicate: rw_tables.owner = rw_users.id, output: all }
            ├─BatchExchange { order: [], dist: HashShard(rw_tables.owner) }
            │ └─BatchHashJoin { type: Inner, predicate: rw_tables.schema_id = rw_schemas.id, output: all }
            │   ├─BatchExchange { order: [], dist: HashShard(rw_tables.schema_id) }
            │   │ └─BatchUnion { all: true }
            │   │   ├─BatchProject { exprs: [rw_tables.name, 'table':Varchar, rw_tables.schema_id, rw_tables.owner] }
            │   │   │ └─BatchFilter { predicate: true }
            │   │   │   └─BatchScan { table: rw_tables, columns: [rw_tables.name, rw_tables.schema_id, rw_tables.owner], distribution: Single }
            │   │   ├─BatchProject { exprs: [rw_system_tables.name, 'system table':Varchar, rw_system_tables.schema_id, rw_system_tables.owner] }
            │   │   │ └─BatchFilter { predicate: true }
            │   │   │   └─BatchScan { table: rw_system_tables, columns: [rw_system_tables.name, rw_system_tables.schema_id, rw_system_tables.owner], distribution: Single }
            │   │   ├─BatchProject { exprs: [rw_sources.name, 'source':Varchar, rw_sources.schema_id, rw_sources.owner] }
            │   │   │ └─BatchFilter { predicate: null:Boolean }
            │   │   │   └─BatchScan { table: rw_sources, columns: [rw_sources.name, rw_sources.schema_id, rw_sources.owner], distribution: Single }
            │   │   ├─BatchProject { exprs: [rw_indexes.name, 'index':Varchar, rw_indexes.schema_id, rw_indexes.owner] }
            │   │   │ └─BatchFilter { predicate: false:Boolean }
            │   │   │   └─BatchScan { table: rw_indexes, columns: [rw_indexes.name, rw_indexes.schema_id, rw_indexes.owner], distribution: Single }
            │   │   ├─BatchProject { exprs: [rw_sinks.name, 'sink':Varchar, rw_sinks.schema_id, rw_sinks.owner] }
            │   │   │ └─BatchFilter { predicate: null:Boolean }
            │   │   │   └─BatchScan { table: rw_sinks, columns: [rw_sinks.name, rw_sinks.schema_id, rw_sinks.owner], distribution: Single }
            │   │   ├─BatchProject { exprs: [rw_materialized_views.name, 'materialized view':Varchar, rw_materialized_views.schema_id, rw_materialized_views.owner] }
            │   │   │ └─BatchFilter { predicate: true }
            │   │   │   └─BatchScan { table: rw_materialized_views, columns: [rw_materialized_views.name, rw_materialized_views.schema_id, rw_materialized_views.owner], distribution: Single }
            │   │   └─BatchProject { exprs: [rw_views.name, 'view':Varchar, rw_views.schema_id, rw_views.owner] }
            │   │     └─BatchFilter { predicate: true }
            │   │       └─BatchScan { table: rw_views, columns: [rw_views.name, rw_views.schema_id, rw_views.owner], distribution: Single }
            │   └─BatchExchange { order: [], dist: HashShard(rw_schemas.id) }
            │     └─BatchFilter { predicate: (rw_schemas.name <> 'pg_catalog':Varchar) AND IsNull(RegexpMatch(rw_schemas.name, '^pg_toast':Varchar)) AND (rw_schemas.name <> 'information_schema':Varchar) }
            │       └─BatchScan { table: rw_schemas, columns: [rw_schemas.id, rw_schemas.name], distribution: Single }
            └─BatchExchange { order: [], dist: HashShard(rw_users.id) }
              └─BatchProject { exprs: [rw_users.name, rw_users.id] }
                └─BatchScan { table: rw_users, columns: [rw_users.id, rw_users.name], distribution: Single }
- sql: |
    create table auction (date_time date);
    select * from hop( auction, auction.date_time, INTERVAL '1', INTERVAL '3600' ) AS hop_1
    where EXISTS (select hop_1.date_time group by hop_1.date_time);
  logical_plan: |-
    LogicalProject { exprs: [auction.date_time, window_start, window_end] }
    └─LogicalApply { type: LeftSemi, on: true, correlated_id: 1 }
      ├─LogicalHopWindow { time_col: auction.date_time, slide: 00:00:01, size: 01:00:00, output: all }
      │ └─LogicalFilter { predicate: IsNotNull(auction.date_time) }
      │   └─LogicalScan { table: auction, columns: [auction.date_time, auction._row_id] }
      └─LogicalProject { exprs: [CorrelatedInputRef { index: 0, correlated_id: 1 } as $expr2] }
        └─LogicalAgg { group_key: [$expr1], aggs: [] }
          └─LogicalProject { exprs: [CorrelatedInputRef { index: 0, correlated_id: 1 } as $expr1] }
            └─LogicalValues { rows: [[]], schema: Schema { fields: [] } }
  optimized_logical_plan_for_batch: |-
    LogicalHopWindow { time_col: auction.date_time, slide: 00:00:01, size: 01:00:00, output: all }
    └─LogicalFilter { predicate: IsNotNull(auction.date_time) }
      └─LogicalJoin { type: LeftSemi, on: IsNotDistinctFrom(auction.date_time, auction.date_time), output: all }
        ├─LogicalScan { table: auction, columns: [auction.date_time], predicate: IsNotNull(auction.date_time) }
        └─LogicalAgg { group_key: [auction.date_time], aggs: [] }
          └─LogicalAgg { group_key: [auction.date_time], aggs: [] }
            └─LogicalHopWindow { time_col: auction.date_time, slide: 00:00:01, size: 01:00:00, output: [auction.date_time] }
              └─LogicalScan { table: auction, columns: [auction.date_time], predicate: IsNotNull(auction.date_time) }
  batch_plan: |-
    BatchHopWindow { time_col: auction.date_time, slide: 00:00:01, size: 01:00:00, output: all }
    └─BatchExchange { order: [], dist: Single }
      └─BatchFilter { predicate: IsNotNull(auction.date_time) }
        └─BatchHashJoin { type: LeftSemi, predicate: auction.date_time IS NOT DISTINCT FROM auction.date_time, output: all }
          ├─BatchExchange { order: [], dist: HashShard(auction.date_time) }
          │ └─BatchFilter { predicate: IsNotNull(auction.date_time) }
          │   └─BatchScan { table: auction, columns: [auction.date_time], distribution: SomeShard }
          └─BatchHashAgg { group_key: [auction.date_time], aggs: [] }
            └─BatchHashAgg { group_key: [auction.date_time], aggs: [] }
              └─BatchHopWindow { time_col: auction.date_time, slide: 00:00:01, size: 01:00:00, output: [auction.date_time] }
                └─BatchExchange { order: [], dist: HashShard(auction.date_time) }
                  └─BatchFilter { predicate: IsNotNull(auction.date_time) }
                    └─BatchScan { table: auction, columns: [auction.date_time], distribution: SomeShard }
  stream_plan: |-
    StreamMaterialize { columns: [date_time, window_start, window_end, auction._row_id(hidden)], stream_key: [auction._row_id, window_start, window_end, date_time], pk_columns: [auction._row_id, window_start, window_end, date_time], pk_conflict: NoCheck }
    └─StreamHashJoin { type: LeftSemi, predicate: auction.date_time IS NOT DISTINCT FROM auction.date_time, output: all }
      ├─StreamExchange { dist: HashShard(auction.date_time) }
      │ └─StreamShare { id: 3 }
      │   └─StreamHopWindow { time_col: auction.date_time, slide: 00:00:01, size: 01:00:00, output: [auction.date_time, window_start, window_end, auction._row_id] }
      │     └─StreamFilter { predicate: IsNotNull(auction.date_time) }
      │       └─StreamTableScan { table: auction, columns: [auction.date_time, auction._row_id], pk: [auction._row_id], dist: UpstreamHashShard(auction._row_id) }
      └─StreamProject { exprs: [auction.date_time] }
        └─StreamHashAgg { group_key: [auction.date_time], aggs: [count] }
          └─StreamProject { exprs: [auction.date_time] }
            └─StreamHashAgg { group_key: [auction.date_time], aggs: [count] }
              └─StreamExchange { dist: HashShard(auction.date_time) }
                └─StreamShare { id: 3 }
                  └─StreamHopWindow { time_col: auction.date_time, slide: 00:00:01, size: 01:00:00, output: [auction.date_time, window_start, window_end, auction._row_id] }
                    └─StreamFilter { predicate: IsNotNull(auction.date_time) }
                      └─StreamTableScan { table: auction, columns: [auction.date_time, auction._row_id], pk: [auction._row_id], dist: UpstreamHashShard(auction._row_id) }
- sql: |
    CREATE TABLE t (v int);
    SELECT 1 FROM t AS t_inner WHERE EXISTS ( SELECT 1 HAVING t_inner.v > 1);
  logical_plan: |-
    LogicalProject { exprs: [1:Int32] }
    └─LogicalApply { type: LeftSemi, on: true, correlated_id: 1 }
      ├─LogicalScan { table: t, columns: [t.v, t._row_id] }
      └─LogicalProject { exprs: [1:Int32] }
        └─LogicalFilter { predicate: (CorrelatedInputRef { index: 0, correlated_id: 1 } > 1:Int32) }
          └─LogicalAgg { aggs: [] }
            └─LogicalProject { exprs: [] }
              └─LogicalValues { rows: [[]], schema: Schema { fields: [] } }
  optimized_logical_plan_for_batch: |-
    LogicalProject { exprs: [1:Int32] }
    └─LogicalJoin { type: LeftSemi, on: true, output: all }
      ├─LogicalScan { table: t, output_columns: [], required_columns: [t.v], predicate: (t.v > 1:Int32) }
      └─LogicalValues { rows: [[]], schema: Schema { fields: [] } }
- sql: |
    create table a (a1 int, a2 int);
    create table b (b1 int, b2 int);
    create table c (c1 int, c2 int);
    select 1 from a where exists ( select 1 from b having exists ( select a1 from c ));
  logical_plan: |-
    LogicalProject { exprs: [1:Int32] }
    └─LogicalApply { type: LeftSemi, on: true, correlated_id: 1 }
      ├─LogicalScan { table: a, columns: [a.a1, a.a2, a._row_id] }
      └─LogicalProject { exprs: [1:Int32] }
        └─LogicalApply { type: LeftSemi, on: true, correlated_id: 2 }
          ├─LogicalAgg { aggs: [] }
          │ └─LogicalProject { exprs: [] }
          │   └─LogicalScan { table: b, columns: [b.b1, b.b2, b._row_id] }
          └─LogicalProject { exprs: [CorrelatedInputRef { index: 0, correlated_id: 1 } as $expr1] }
            └─LogicalScan { table: c, columns: [c.c1, c.c2, c._row_id] }
  optimized_logical_plan_for_batch: |-
    LogicalProject { exprs: [1:Int32] }
    └─LogicalJoin { type: LeftSemi, on: IsNotDistinctFrom(a.a1, a.a1), output: [] }
      ├─LogicalScan { table: a, columns: [a.a1] }
      └─LogicalJoin { type: LeftSemi, on: IsNotDistinctFrom(a.a1, a.a1), output: all }
        ├─LogicalJoin { type: Inner, on: true, output: all }
        │ ├─LogicalAgg { group_key: [a.a1], aggs: [] }
        │ │ └─LogicalScan { table: a, columns: [a.a1] }
        │ └─LogicalAgg { aggs: [] }
        │   └─LogicalScan { table: b, columns: [] }
        └─LogicalJoin { type: Inner, on: true, output: all }
          ├─LogicalAgg { group_key: [a.a1], aggs: [] }
          │ └─LogicalScan { table: a, columns: [a.a1] }
          └─LogicalScan { table: c, columns: [] }
- sql: |
    create table a(a1 int, a2 int);
    create table b(b1 int, b2 int);
    select * from a where a1 = (select min(b1) from b where b2 = (select min(b1) from (select b1 from b where b1 = a1) as z ) );
  logical_plan: |-
    LogicalProject { exprs: [a.a1, a.a2] }
    └─LogicalFilter { predicate: (a.a1 = min(b.b1)) }
      └─LogicalApply { type: LeftOuter, on: true, correlated_id: 1, max_one_row: true }
        ├─LogicalScan { table: a, columns: [a.a1, a.a2, a._row_id] }
        └─LogicalProject { exprs: [min(b.b1)] }
          └─LogicalAgg { aggs: [min(b.b1)] }
            └─LogicalProject { exprs: [b.b1] }
              └─LogicalFilter { predicate: (b.b2 = min(b.b1)) }
                └─LogicalApply { type: LeftOuter, on: true, correlated_id: 2, max_one_row: true }
                  ├─LogicalScan { table: b, columns: [b.b1, b.b2, b._row_id] }
                  └─LogicalProject { exprs: [min(b.b1)] }
                    └─LogicalAgg { aggs: [min(b.b1)] }
                      └─LogicalProject { exprs: [b.b1] }
                        └─LogicalProject { exprs: [b.b1] }
                          └─LogicalFilter { predicate: (b.b1 = CorrelatedInputRef { index: 0, correlated_id: 1 }) }
                            └─LogicalScan { table: b, columns: [b.b1, b.b2, b._row_id] }
  optimized_logical_plan_for_batch: |-
    LogicalJoin { type: Inner, on: IsNotDistinctFrom(a.a1, a.a1) AND (a.a1 = min(b.b1)), output: [a.a1, a.a2] }
    ├─LogicalScan { table: a, columns: [a.a1, a.a2] }
    └─LogicalAgg { group_key: [a.a1], aggs: [min(b.b1)] }
      └─LogicalJoin { type: LeftOuter, on: IsNotDistinctFrom(a.a1, a.a1), output: [a.a1, b.b1] }
        ├─LogicalAgg { group_key: [a.a1], aggs: [] }
        │ └─LogicalScan { table: a, columns: [a.a1] }
        └─LogicalJoin { type: Inner, on: (b.b2 = min(b.b1)), output: [a.a1, b.b1] }
          ├─LogicalScan { table: b, columns: [b.b1, b.b2] }
          └─LogicalAgg { group_key: [a.a1], aggs: [min(b.b1)] }
            └─LogicalJoin { type: LeftOuter, on: IsNotDistinctFrom(a.a1, b.b1), output: [a.a1, b.b1] }
              ├─LogicalAgg { group_key: [a.a1], aggs: [] }
              │ └─LogicalScan { table: a, columns: [a.a1] }
              └─LogicalProject { exprs: [b.b1, b.b1] }
                └─LogicalScan { table: b, columns: [b.b1], predicate: IsNotNull(b.b1) }
- name: test subquery in join on condition
  sql: |
    create table a (v1 int, v2 int);
    create table b (v1 int, v2 int);
    create table c (v1 int, v2 int);
    select * from a left outer join b on a.v1 = b.v1 and a.v2 = (select v2 from c where v1 = 1 limit 1);
  planner_error: |-
    Feature is not yet implemented: Subquery in join on condition is unsupported
    No tracking issue yet. Feel free to submit a feature request at https://github.com/risingwavelabs/risingwave/issues/new?labels=type%2Ffeature&template=feature_request.yml
- sql: |
    create table auction (date_time date);
    select * from auction AS hop_1
    where EXISTS (select hop_1.date_time from auction group by hop_1.date_time );
  stream_error: |-
    Not supported: streaming nested-loop join
    HINT: The non-equal join in the query requires a nested-loop join executor, which could be very expensive to run. Consider rewriting the query to use dynamic filter as a substitute if possible.
    See also: https://github.com/risingwavelabs/rfcs/blob/main/rfcs/0033-dynamic-filter.md
- sql: |
    SELECT 1, (SELECT regexp_matches('barbeque barbeque', '(bar)(beque)', 'g'))
  batch_error: 'internal error: Scalar subquery might produce more than one row.'
- sql: |
    create table t1 (a int, b int);
    select a, (select count(*) from t1 where t1.a <> t.b) from t1 as t order by 1;
  logical_plan: |-
    LogicalProject { exprs: [t1.a, count] }
    └─LogicalApply { type: LeftOuter, on: true, correlated_id: 1, max_one_row: true }
      ├─LogicalScan { table: t1, columns: [t1.a, t1.b, t1._row_id] }
      └─LogicalProject { exprs: [count] }
        └─LogicalAgg { aggs: [count] }
          └─LogicalProject { exprs: [] }
            └─LogicalFilter { predicate: (t1.a <> CorrelatedInputRef { index: 1, correlated_id: 1 }) }
              └─LogicalScan { table: t1, columns: [t1.a, t1.b, t1._row_id] }
  optimized_logical_plan_for_batch: |-
    LogicalJoin { type: LeftOuter, on: IsNotDistinctFrom(t1.b, t1.b), output: [t1.a, count(1:Int32)] }
    ├─LogicalScan { table: t1, columns: [t1.a, t1.b] }
    └─LogicalAgg { group_key: [t1.b], aggs: [count(1:Int32)] }
      └─LogicalJoin { type: LeftOuter, on: IsNotDistinctFrom(t1.b, t1.b), output: [t1.b, 1:Int32] }
        ├─LogicalAgg { group_key: [t1.b], aggs: [] }
        │ └─LogicalScan { table: t1, columns: [t1.b] }
        └─LogicalProject { exprs: [t1.b, 1:Int32] }
          └─LogicalJoin { type: Inner, on: (t1.a <> t1.b), output: [t1.b] }
            ├─LogicalAgg { group_key: [t1.b], aggs: [] }
            │ └─LogicalScan { table: t1, columns: [t1.b] }
            └─LogicalScan { table: t1, columns: [t1.a] }
- name: test subquery on sources
  sql: |
    create source a (a1 int, a2 int)  with ( connector ='datagen' );
    create source b (b1 int, b2 int)  with ( connector ='datagen' );
    create source c (c1 int, c2 int) with ( connector ='datagen' );
    select 1 from a where exists ( select 1 from b having exists ( select a1 from c ));
  optimized_logical_plan_for_stream: |-
    LogicalProject { exprs: [1:Int32] }
    └─LogicalJoin { type: LeftSemi, on: IsNotDistinctFrom(a1, a1), output: [] }
      ├─LogicalShare { id: 2 }
      │ └─LogicalProject { exprs: [a1] }
      │   └─LogicalSource { source: a, columns: [a1, a2, _row_id], time_range: (Unbounded, Unbounded) }
      └─LogicalJoin { type: LeftSemi, on: IsNotDistinctFrom(a1, a1), output: all }
        ├─LogicalJoin { type: Inner, on: true, output: all }
        │ ├─LogicalAgg { group_key: [a1], aggs: [] }
        │ │ └─LogicalShare { id: 2 }
        │ │   └─LogicalProject { exprs: [a1] }
        │ │     └─LogicalSource { source: a, columns: [a1, a2, _row_id], time_range: (Unbounded, Unbounded) }
        │ └─LogicalAgg { aggs: [] }
        │   └─LogicalSource { source: b, columns: [b1, b2, _row_id], time_range: (Unbounded, Unbounded) }
        └─LogicalJoin { type: Inner, on: true, output: [a1] }
          ├─LogicalAgg { group_key: [a1], aggs: [] }
          │ └─LogicalShare { id: 2 }
          │   └─LogicalProject { exprs: [a1] }
          │     └─LogicalSource { source: a, columns: [a1, a2, _row_id], time_range: (Unbounded, Unbounded) }
          └─LogicalSource { source: c, columns: [c1, c2, _row_id], time_range: (Unbounded, Unbounded) }
- name: test subquery in table function
  sql: |
    create table t(x int[], y int[], k int primary key);
    select *, (select sum(i) from unnest(x) i) as sum_x from t;
  batch_plan: |-
    BatchExchange { order: [], dist: Single }
    └─BatchHashJoin { type: LeftOuter, predicate: t.x IS NOT DISTINCT FROM t.x, output: [t.x, t.y, t.k, sum(Unnest($0))] }
      ├─BatchExchange { order: [], dist: HashShard(t.x) }
      │ └─BatchScan { table: t, columns: [t.x, t.y, t.k], distribution: UpstreamHashShard(t.k) }
      └─BatchHashAgg { group_key: [t.x], aggs: [sum(Unnest($0))] }
        └─BatchHashJoin { type: LeftOuter, predicate: t.x IS NOT DISTINCT FROM t.x, output: [t.x, Unnest($0)] }
          ├─BatchHashAgg { group_key: [t.x], aggs: [] }
          │ └─BatchExchange { order: [], dist: HashShard(t.x) }
          │   └─BatchScan { table: t, columns: [t.x], distribution: SomeShard }
          └─BatchProject { exprs: [t.x, Unnest($0)] }
            └─BatchProjectSet { select_list: [$0, Unnest($0)] }
              └─BatchHashAgg { group_key: [t.x], aggs: [] }
                └─BatchExchange { order: [], dist: HashShard(t.x) }
                  └─BatchScan { table: t, columns: [t.x], distribution: SomeShard }
  stream_plan: |-
    StreamMaterialize { columns: [x, y, k, sum_x, t.x(hidden)], stream_key: [k, t.x, x], pk_columns: [k, t.x, x], pk_conflict: NoCheck }
    └─StreamHashJoin { type: LeftOuter, predicate: t.x IS NOT DISTINCT FROM t.x, output: [t.x, t.y, t.k, sum(Unnest($0)), t.x] }
      ├─StreamExchange { dist: HashShard(t.x) }
      │ └─StreamTableScan { table: t, columns: [t.x, t.y, t.k], pk: [t.k], dist: UpstreamHashShard(t.k) }
      └─StreamProject { exprs: [t.x, sum(Unnest($0))] }
        └─StreamHashAgg { group_key: [t.x], aggs: [sum(Unnest($0)), count] }
          └─StreamHashJoin { type: LeftOuter, predicate: t.x IS NOT DISTINCT FROM t.x, output: [t.x, Unnest($0), t.x, projected_row_id] }
            ├─StreamProject { exprs: [t.x] }
            │ └─StreamHashAgg { group_key: [t.x], aggs: [count] }
            │   └─StreamExchange { dist: HashShard(t.x) }
            │     └─StreamTableScan { table: t, columns: [t.x, t.k], pk: [t.k], dist: UpstreamHashShard(t.k) }
            └─StreamProject { exprs: [t.x, Unnest($0), projected_row_id] }
              └─StreamProjectSet { select_list: [$0, Unnest($0)] }
                └─StreamProject { exprs: [t.x] }
                  └─StreamHashAgg { group_key: [t.x], aggs: [count] }
                    └─StreamExchange { dist: HashShard(t.x) }
                      └─StreamTableScan { table: t, columns: [t.x, t.k], pk: [t.k], dist: UpstreamHashShard(t.k) }
- name: CorrelatedInputRef in ProjectSet and apply on condition is true.
  sql: |
    create table t(x int[], y int[], k int primary key);
    select *, (select sum(i) from (select unnest(x) i) Q ) as sum_x from t;
  optimized_logical_plan_for_batch: |-
    LogicalJoin { type: LeftOuter, on: IsNotDistinctFrom(t.x, t.x), output: [t.x, t.y, t.k, sum(Unnest($0))] }
    ├─LogicalScan { table: t, columns: [t.x, t.y, t.k] }
    └─LogicalAgg { group_key: [t.x], aggs: [sum(Unnest($0))] }
      └─LogicalJoin { type: LeftOuter, on: IsNotDistinctFrom(t.x, t.x), output: [t.x, Unnest($0)] }
        ├─LogicalAgg { group_key: [t.x], aggs: [] }
        │ └─LogicalScan { table: t, columns: [t.x] }
        └─LogicalProject { exprs: [t.x, Unnest($0)] }
          └─LogicalProjectSet { select_list: [$0, Unnest($0)] }
            └─LogicalAgg { group_key: [t.x], aggs: [] }
              └─LogicalScan { table: t, columns: [t.x] }
  optimized_logical_plan_for_stream: |-
    LogicalJoin { type: LeftOuter, on: IsNotDistinctFrom(t.x, t.x), output: [t.x, t.y, t.k, sum(Unnest($0))] }
    ├─LogicalScan { table: t, columns: [t.x, t.y, t.k] }
    └─LogicalAgg { group_key: [t.x], aggs: [sum(Unnest($0))] }
      └─LogicalJoin { type: LeftOuter, on: IsNotDistinctFrom(t.x, t.x), output: [t.x, Unnest($0)] }
        ├─LogicalAgg { group_key: [t.x], aggs: [] }
        │ └─LogicalScan { table: t, columns: [t.x] }
        └─LogicalProject { exprs: [t.x, Unnest($0)] }
          └─LogicalProjectSet { select_list: [$0, Unnest($0)] }
            └─LogicalAgg { group_key: [t.x], aggs: [] }
              └─LogicalScan { table: t, columns: [t.x] }
- name: CorrelatedInputRef in ProjectSet and apply on condition refers to no table function.
  sql: |
    create table t(x int[], y int[], k int primary key);
    select *, (select sum(i) from (select unnest(x) i, 1 c) Q where k = c ) as sum_x from t;
  optimized_logical_plan_for_batch: |-
    LogicalJoin { type: LeftOuter, on: IsNotDistinctFrom(t.x, t.x) AND IsNotDistinctFrom(t.k, t.k), output: [t.x, t.y, t.k, sum(Unnest($0))] }
    ├─LogicalScan { table: t, columns: [t.x, t.y, t.k] }
    └─LogicalAgg { group_key: [t.x, t.k], aggs: [sum(Unnest($0))] }
      └─LogicalJoin { type: LeftOuter, on: IsNotDistinctFrom(t.x, t.x) AND IsNotDistinctFrom(t.k, t.k), output: [t.x, t.k, Unnest($0)] }
        ├─LogicalAgg { group_key: [t.x, t.k], aggs: [] }
        │ └─LogicalScan { table: t, columns: [t.x, t.k] }
        └─LogicalProject { exprs: [t.x, t.k, Unnest($0)] }
          └─LogicalProjectSet { select_list: [$0, $1, Unnest($0)] }
            └─LogicalJoin { type: Inner, on: true, output: all }
              ├─LogicalAgg { group_key: [t.x, t.k], aggs: [] }
              │ └─LogicalScan { table: t, columns: [t.x, t.k], predicate: (t.k = 1:Int32) }
              └─LogicalValues { rows: [[]], schema: Schema { fields: [] } }
  optimized_logical_plan_for_stream: |-
    LogicalJoin { type: LeftOuter, on: IsNotDistinctFrom(t.x, t.x) AND IsNotDistinctFrom(t.k, t.k), output: [t.x, t.y, t.k, sum(Unnest($0))] }
    ├─LogicalScan { table: t, columns: [t.x, t.y, t.k] }
    └─LogicalAgg { group_key: [t.x, t.k], aggs: [sum(Unnest($0))] }
      └─LogicalJoin { type: LeftOuter, on: IsNotDistinctFrom(t.x, t.x) AND IsNotDistinctFrom(t.k, t.k), output: [t.x, t.k, Unnest($0)] }
        ├─LogicalAgg { group_key: [t.x, t.k], aggs: [] }
        │ └─LogicalScan { table: t, columns: [t.x, t.k] }
        └─LogicalProject { exprs: [t.x, t.k, Unnest($0)] }
          └─LogicalProjectSet { select_list: [$0, $1, Unnest($0)] }
            └─LogicalJoin { type: Inner, on: true, output: all }
              ├─LogicalAgg { group_key: [t.x, t.k], aggs: [] }
              │ └─LogicalScan { table: t, columns: [t.x, t.k], predicate: (t.k = 1:Int32) }
              └─LogicalValues { rows: [[]], schema: Schema { fields: [] } }
- name: CorrelatedInputRef in ProjectSet and apply on condition refers to table function.
  sql: |
    create table t(x int[], y int[], k int primary key);
    select *, (select sum(i) from (select unnest(x) i) Q where k = i ) as sum_x from t;
  optimizer_error: 'internal error: Subquery can not be unnested.'
